#!/bin/sh
# Fit build environment setup script
# Based on the FSL Community BSP script
#   sources/base/setup-environment
# and the Freescale iMX BSP script
#   sources/meta-fsl-bsp-release/imx/tools/fsl-setup-release.sh

. sources/meta-fsl-bsp-release/imx/tools/setup-utils.sh

FSL_TOOLS_DIR="meta-fsl-bsp-release/imx/tools"
FSL_RELEASE_SETUP_SCRIPT="fsl-setup-release.sh"

CWD=`pwd`
PROGNAME="fit-setup-build"


usage()
{
    echo -e "
Usage: MACHINE=<machine> DISTRO=<distro> source $PROGNAME <build-dir>
Usage:                                   source $PROGNAME <build-dir>
    <machine>    machine name
    <distro>     distro name
    <build-dir>  build directory

The first usage is for creating a new build directory. In this case,
the script creates the build directory <build-dir>, configures it for
the specified <machine> and <distro>, and prepares the calling shell
for running bitbake on the build directory.

The second usage is for using an existing build directory. In this case,
the script prepares the calling shell for running bitbake on the build
directory <build-dir>. The build directory configuration is unchanged.
"

    ls sources/meta-fit-bsp/conf/machine/*.conf > /dev/null 2>&1
    ls sources/meta-phor-v2/conf/distro/*.conf > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        echo -e "
Supported machines: `echo; ls sources/meta-fit-bsp/conf/machine/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`

Supported distros: `echo; ls sources/meta-phor-v2/conf/distro/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`

Examples:

- To create a new Yocto build directory:
  $ MACHINE=fv2qdeva DISTRO=speedy source $PROGNAME build

- To use an existing Yocto build directory:
  $ source $PROGNAME <build-dir>
"
    fi
}

clean_up()
{
   unset EULA LIST_MACHINES VALID_MACHINE
   unset CWD TEMPLATES SHORTOPTS LONGOPTS ARGS PROGNAME
   unset generated_config updated
   unset MACHINE SDKMACHINE DISTRO OEROOT
   unset ok_maschinen ok_distros
}

# get command line options
SHORTOPTS="h"
LONGOPTS="help"

ARGS=$(getopt --options $SHORTOPTS  \
  --longoptions $LONGOPTS --name $PROGNAME -- "$@" )
# Print the usage menu if invalid options are specified
if [ $? != 0 -o $# -lt 1 ]; then
   usage && clean_up
   return 1
fi

eval set -- "$ARGS"
while true;
do
    case $1 in
        -h|--help)
           usage
           clean_up
           return 0
           ;;
        --)
           shift
           break
           ;;
    esac
done

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
fi

# check machine
ok_maschinen=`ls sources/meta-fit-bsp/conf/machine/*.conf | sed s/\.conf//g | sed -r 's/^.+\///'`
if [[ $ok_maschinen != *"$MACHINE"* ]]; then
    usage
    echo -e "ERROR: machine $MACHINE is not supported."
    clean_up
    return 1
fi

# check distro
ok_distros=`ls sources/meta-phor-v2/conf/distro/*.conf | sed s/\.conf//g | sed -r 's/^.+\///'`
if [[ $ok_distros != *"$DISTRO"* ]]; then
    usage
    echo -e "ERROR: distro $DISTRO is not supported."
    clean_up
    return 1
fi

# copy new EULA into community so setup uses latest i.MX EULA
cp sources/meta-fsl-bsp-release/imx/EULA.txt sources/meta-freescale/EULA

if [ ! -e "$1/conf/local.conf.sample" ]; then
    build_dir_setup_enabled="true"
else
    build_dir_setup_enabled="false"
fi

if [ "$build_dir_setup_enabled" = "true" ] && [ -z "$MACHINE" ]; then
    usage
    echo -e "ERROR: You must set MACHINE when creating a new build directory."
    clean_up
    return 1
fi

if [ -z "$SDKMACHINE" ]; then
    SDKMACHINE='i686'
fi

if [ "$build_dir_setup_enabled" = "true" ] && [ -z "$DISTRO" ]; then
    usage
    echo -e "ERROR: You must set DISTRO when creating a new build directory."
    clean_up
    return 1
fi

OEROOT=$PWD/sources/poky
if [ -e $PWD/sources/oe-core ]; then
    OEROOT=$PWD/sources/oe-core
fi

. $OEROOT/oe-init-build-env $CWD/$1 > /dev/null

# if conf/local.conf not generated, no need to go further
if [ ! -e conf/local.conf ]; then
    clean_up && return 1
fi

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="`echo $PATH | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//'`"

generated_config=
if [ "$build_dir_setup_enabled" = "true" ]; then
    mv conf/local.conf conf/local.conf.sample

    # Generate the local.conf based on the Yocto defaults
    TEMPLATES=$CWD/sources/base/conf 
    grep -v '^#\|^$' conf/local.conf.sample > conf/local.conf
    cat >> conf/local.conf <<EOF

DL_DIR ?= "\${BSPDIR}/downloads/"
EOF
    # Change settings according environment
    sed -e "s,MACHINE ??=.*,MACHINE ??= '$MACHINE',g" \
        -e "s,SDKMACHINE ??=.*,SDKMACHINE ??= '$SDKMACHINE',g" \
        -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" \
        -i conf/local.conf

    cp $TEMPLATES/* conf/

    for s in $HOME/.oe $HOME/.yocto; do
        if [ -e $s/site.conf ]; then
            echo "Linking $s/site.conf to conf/site.conf"
            ln -s $s/site.conf conf
        fi
    done

    # add fsl imx layers to bitbake layers config
    echo "" >> ./conf/bblayers.conf
    echo "# i.MX Yocto Project Release layers" >> ./conf/bblayers.conf
    hook_in_layer meta-fsl-bsp-release/imx/meta-bsp
    hook_in_layer meta-fsl-bsp-release/imx/meta-sdk
    echo "" >> ./conf/bblayers.conf
    echo "BBLAYERS += \" \${BSPDIR}/sources/meta-browser \"" >> ./conf/bblayers.conf
    echo "BBLAYERS += \" \${BSPDIR}/sources/meta-openembedded/meta-gnome \"" >> ./conf/bblayers.conf
    echo "BBLAYERS += \" \${BSPDIR}/sources/meta-openembedded/meta-networking \"" >> ./conf/bblayers.conf
    echo "BBLAYERS += \" \${BSPDIR}/sources/meta-openembedded/meta-python \"" >> ./conf/bblayers.conf
    echo "BBLAYERS += \" \${BSPDIR}/sources/meta-openembedded/meta-filesystems \"" >> ./conf/bblayers.conf
    echo "BBLAYERS += \" \${BSPDIR}/sources/meta-qt5 \"" >> ./conf/bblayers.conf

    # add fit layers to bitbake layers config
    echo "" >> ./conf/bblayers.conf
    echo "# Fit layers" >> ./conf/bblayers.conf
    echo "BBLAYERS += \" \${BSPDIR}/sources/meta-fit-bsp \"" >> ./conf/bblayers.conf
    echo "BBLAYERS += \" \${BSPDIR}/sources/meta-phor-v2 \"" >> ./conf/bblayers.conf

    generated_config=1
fi

# Handle EULA setting
EULA_ACCEPTED=

# EULA has been accepted already (ACCEPT_FSL_EULA is set in local.conf)
if grep -q '^\s*ACCEPT_FSL_EULA\s*=\s*["'\'']..*["'\'']' conf/local.conf; then
    EULA_ACCEPTED=1
fi

if [ -z "$EULA_ACCEPTED" ] && [ -n "$EULA" ]; then
    # The FSL EULA is not set as accepted in local.conf, but the EULA
    # variable is set in the environment, so we just configure
    # ACCEPT_FSL_EULA in local.conf according to $EULA.
    echo "ACCEPT_FSL_EULA = \"$EULA\"" >> conf/local.conf
elif [ -n "$EULA_ACCEPTED" ]; then
    # The FSL EULA has been accepted once, so ACCEPT_FSL_EULA is set
    # in local.conf.  No need to do anything.
    :
else
    # THE FSL EULA is not set as accepted in local.conf, and EULA is
    # not set in the environment, so we need to ask user if he/she
    # accepts the FSL EULA:
    cat <<EOF

Some BSPs depend on libraries and packages which are covered by Freescale's
End User License Agreement (EULA). To have the right to use these binaries in
your images, you need to read and accept the following...

EOF

    sleep 4

    more -d $CWD/sources/meta-freescale/EULA
    echo
    REPLY=
    while [ -z "$REPLY" ]; do
        echo -n "Do you accept the EULA you just read? (y/n) "
        read REPLY
        case "$REPLY" in
            y|Y)
            echo "EULA has been accepted."
            echo "ACCEPT_FSL_EULA = \"1\"" >> conf/local.conf
            ;;
            n|N)
            echo "EULA has not been accepted."
            ;;
            *)
            REPLY=
            ;;
        esac
    done
fi

cat <<EOF
Welcome to Fit BSP

You can now run 'bitbake <target>'

Common targets are:
    fit-image-sato
    core-image-sato
    core-image-minimal
    meta-toolchain
    meta-toolchain-sdk
    adt-installer
    meta-ide-support

EOF

if [ -n "$generated_config" ]; then
    cat <<EOF
Your build environment has been configured with:

    MACHINE=$MACHINE
    SDKMACHINE=$SDKMACHINE
    DISTRO=$DISTRO
    EULA=$EULA
EOF
else
    echo "Your configuration files at $1 have not been touched."
fi

clean_up
